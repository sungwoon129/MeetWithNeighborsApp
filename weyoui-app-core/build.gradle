
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'

}


group = 'io.weyoui'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly 'com.mysql:mysql-connector-j'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //jackson - java8 new type parser
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.0'

    // geojson processing
    implementation group: 'org.n52.jackson', name: 'jackson-datatype-jts', version: '1.2.10'


    //geometry processing
    implementation 'org.hibernate:hibernate-spatial:5.6.2.Final'


    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
    useJUnitPlatform()
}


def generated = 'src/main/generated'

clean {
    delete file (generated)
}

tasks.withType(JavaCompile).configureEach {
    options.generatedSourceOutputDirectory.set(file(generated))
}